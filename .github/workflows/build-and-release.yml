name: Build Application

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Debug - Verify package installation
      run: |
        pip list
        python -c "import fastexcel; print('fastexcel location:', fastexcel.__file__)"
        python -c "import pandas; print('pandas version:', pandas.__version__)"
        python -c "import polars; print('polars version:', polars.__version__)"
        python -c "import pyarrow; print('pyarrow version:', pyarrow.__version__)"
        python -c "import sys; import os; print('Python path:', sys.executable)"
        
    - name: Create PyInstaller hook for fastexcel
      run: |
        $hookContent = @"
        from PyInstaller.utils.hooks import collect_all, collect_dynamic_libs
        
        datas, binaries, hiddenimports = collect_all('fastexcel')
        binaries += collect_dynamic_libs('fastexcel')
        "@
        New-Item -ItemType Directory -Force -Path "hooks"
        Set-Content -Path "hooks/hook-fastexcel.py" -Value $hookContent
      shell: pwsh
        
    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name AutomatedCostModelling `
        --add-data "backend;backend" `
        --add-data "frontend;frontend" `
        --additional-hooks-dir=hooks `
        --hidden-import=fastexcel `
        --hidden-import=fastexcel._fastexcel `
        --collect-all fastexcel `
        --collect-binaries fastexcel `
        --copy-metadata fastexcel `
        --hidden-import=pandas `
        --hidden-import=numpy `
        --hidden-import=polars `
        --hidden-import=pyarrow `
        --hidden-import=pyarrow.parquet `
        --hidden-import=pyarrow._fs `
        --hidden-import=pyarrow._hdfs `
        --collect-all pyarrow `
        --hidden-import=matplotlib `
        --hidden-import=pint `
        --collect-submodules fastexcel `
        --collect-submodules pyarrow `
        --runtime-hook=runtime_hook.py `
        main.py
      shell: pwsh
        
    - name: Create runtime hook
      run: |
        $runtimeHook = @"
        import os
        import sys
        
        # Add the bundled directory to PATH for DLL loading
        if hasattr(sys, '_MEIPASS'):
            os.environ['PATH'] = sys._MEIPASS + os.pathsep + os.environ.get('PATH', '')
        "@
        Set-Content -Path "runtime_hook.py" -Value $runtimeHook
      shell: pwsh
        
    - name: Verify build output
      run: |
        dir dist
        if (Test-Path "dist/AutomatedCostModelling.exe") {
          Write-Host "Build successful - EXE found"
          $size = (Get-Item "dist/AutomatedCostModelling.exe").Length / 1MB
          Write-Host "EXE size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Error "Build failed - EXE not found"
          exit 1
        }
      shell: pwsh
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: AutomatedCostModelling
        path: dist/AutomatedCostModelling.exe
        retention-days: 30
        
    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build/
          *.spec
        retention-days: 7