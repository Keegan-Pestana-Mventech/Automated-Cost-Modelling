name: Build and Test Application

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify test dependencies
      run: |
        pip list
        python -c "import polars; print('polars version:', polars.__version__)"
        python -c "import numpy; print('numpy version:', numpy.__version__)"
        python -c "import matplotlib; print('matplotlib version:', matplotlib.__version__)"
        python -c "import pint; print('pint version:', pint.__version__)"
        
    - name: Create output directories
      run: |
        mkdir -p output/plots
        
    - name: Run backend tests
      run: |
        python tests/test_backend.py
      continue-on-error: false
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: |
          output/
          
    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-logs
        path: |
          output/
          *.log

  build:
    needs: test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Debug - Verify package installation
      run: |
        pip list
        python -c "import fastexcel; print('fastexcel location:', fastexcel.__file__)"
        python -c "import pandas; print('pandas version:', pandas.__version__)"
        python -c "import polars; print('polars version:', polars.__version__)"
        python -c "import pyarrow; print('pyarrow version:', pyarrow.__version__)"
        
    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name AutomatedCostModelling `
        --add-data "backend;backend" `
        --add-data "frontend;frontend" `
        --hidden-import=fastexcel `
        --hidden-import=fastexcel._fastexcel `
        --collect-all fastexcel `
        --collect-binaries fastexcel `
        --copy-metadata fastexcel `
        --hidden-import=pandas `
        --hidden-import=numpy `
        --hidden-import=polars `
        --hidden-import=pyarrow `
        --hidden-import=pyarrow.parquet `
        --collect-all pyarrow `
        --hidden-import=matplotlib `
        --hidden-import=pint `
        --collect-submodules fastexcel `
        main.py
        
    - name: Verify build output
      run: |
        dir dist
        if (Test-Path "dist/AutomatedCostModelling.exe") {
          Write-Host "Build successful - EXE found"
          $size = (Get-Item "dist/AutomatedCostModelling.exe").Length / 1MB
          Write-Host "EXE size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Error "Build failed - EXE not found"
          exit 1
        }
      shell: pwsh
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: AutomatedCostModelling
        path: dist/AutomatedCostModelling.exe
        retention-days: 30
        
    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build/
          *.spec

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: AutomatedCostModelling
        path: ./dist
        
    - name: Get version
      id: version
      run: |
        echo "VERSION=v$(date +'%Y.%m.%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          dist/AutomatedCostModelling.exe
        body: |
          ## Automated Cost Modelling Release
          
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
          
          ### Installation
          Download the `AutomatedCostModelling.exe` file and run it directly on Windows.
          
          ### Testing Status
          âœ… All tests passed before build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}